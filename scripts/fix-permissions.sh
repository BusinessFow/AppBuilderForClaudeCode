#!/bin/bash

# Fix Permissions Script for AppBuilderForClaudeCode
# Designed for Debian installation at /srv/app/AppBuilderForClaudeCode
# This script fixes all permissions issues

set -e  # Exit on error

echo "======================================"
echo "Fixing Permissions for AppBuilderForClaudeCode"
echo "======================================"
echo ""

# Use production path on Debian, fallback to dynamic detection
if [ -d "/srv/app/AppBuilderForClaudeCode" ]; then
    BASE_PATH="/srv/app/AppBuilderForClaudeCode"
else
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    BASE_PATH="$( cd "$SCRIPT_DIR/.." && pwd )"
fi

echo "Base path: $BASE_PATH"
cd "$BASE_PATH"

# Detect web server user
if id -u www-data >/dev/null 2>&1; then
    WEB_USER="www-data"
    WEB_GROUP="www-data"
elif id -u _www >/dev/null 2>&1; then
    WEB_USER="_www"
    WEB_GROUP="_www"
else
    WEB_USER=$(whoami)
    WEB_GROUP=$(whoami)
    echo "Warning: Could not detect web server user, using current user: $WEB_USER"
fi

echo "Web server user: $WEB_USER:$WEB_GROUP"
echo ""

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "This script should be run as root for full permissions fix"
    echo "Running with limited permissions..."
    SUDO_CMD=""
else
    SUDO_CMD="sudo"
fi

echo "Step 1: Creating necessary directories..."
mkdir -p storage/app/claude-sessions
mkdir -p storage/app/claude-home
mkdir -p storage/app/claude-home/.config
mkdir -p storage/app/public
mkdir -p storage/app/public/screenshots
mkdir -p storage/app/private
mkdir -p storage/framework/cache
mkdir -p storage/framework/sessions
mkdir -p storage/framework/testing
mkdir -p storage/framework/views
mkdir -p storage/logs
mkdir -p bootstrap/cache

echo "✓ Directories created"
echo ""

echo "Step 2: Setting ownership..."
if [ "$EUID" -eq 0 ]; then
    # Set ownership for all files
    chown -R "$WEB_USER:$WEB_GROUP" .
    echo "✓ Ownership set to $WEB_USER:$WEB_GROUP"
else
    echo "⚠ Skipping ownership change (requires root)"
fi
echo ""

echo "Step 3: Setting directory permissions..."
# Set base permissions for directories
find . -type d -exec chmod 755 {} \;

# Set special permissions for storage directories
chmod -R 775 storage
chmod -R 775 bootstrap/cache

# Ensure scripts are executable
chmod +x scripts/*.sh

# Set permissions for specific directories
chmod 775 storage/app
chmod 775 storage/app/claude-sessions
chmod 775 storage/app/claude-home
chmod 775 storage/app/claude-home/.config
chmod 775 storage/app/public
chmod 775 storage/app/public/screenshots
chmod 775 storage/app/private
chmod 775 storage/framework
chmod 775 storage/framework/cache
chmod 775 storage/framework/sessions
chmod 775 storage/framework/testing
chmod 775 storage/framework/views
chmod 775 storage/logs

echo "✓ Directory permissions set"
echo ""

echo "Step 4: Setting file permissions..."
# Set base permissions for files
find . -type f -exec chmod 644 {} \;

# Make all PHP artisan executable
chmod +x artisan

# Make all scripts executable
chmod +x scripts/*.sh

# Set permissions for .env file if it exists
if [ -f .env ]; then
    chmod 640 .env
    if [ "$EUID" -eq 0 ]; then
        chown "$WEB_USER:$WEB_GROUP" .env
    fi
fi

echo "✓ File permissions set"
echo ""

echo "Step 5: Setting SELinux context (if applicable)..."
if command -v getenforce &> /dev/null && [ "$(getenforce)" != "Disabled" ]; then
    echo "SELinux is enabled. Setting contexts..."
    
    # Set httpd context for web directories
    chcon -R -t httpd_sys_content_t public/ 2>/dev/null || true
    chcon -R -t httpd_sys_rw_content_t storage/ 2>/dev/null || true
    chcon -R -t httpd_sys_rw_content_t bootstrap/cache/ 2>/dev/null || true
    
    # Allow httpd to execute scripts
    chcon -t httpd_exec_t scripts/claude-screen-manager.sh 2>/dev/null || true
    
    # Allow httpd network connections (for Claude API)
    setsebool -P httpd_can_network_connect 1 2>/dev/null || true
    
    echo "✓ SELinux contexts set"
else
    echo "✓ SELinux not enabled or not found"
fi
echo ""

echo "Step 6: Configuring sudo permissions..."
SUDOERS_FILE="/etc/sudoers.d/claude-screen-manager"

if [ "$EUID" -eq 0 ]; then
    # Create sudoers file
    cat > "$SUDOERS_FILE" << EOF
# Claude Screen Manager sudoers configuration
# Auto-generated by fix-permissions.sh

# Allow www-data to run claude-screen-manager.sh without password
$WEB_USER ALL=(ALL) NOPASSWD: $BASE_PATH/scripts/claude-screen-manager.sh

# Allow www-data to run screen commands for claude sessions
$WEB_USER ALL=(ALL) NOPASSWD: /usr/bin/screen -ls claude_*
$WEB_USER ALL=(ALL) NOPASSWD: /usr/bin/screen -S claude_* -X quit
$WEB_USER ALL=(ALL) NOPASSWD: /usr/bin/screen -dmS claude_* *
EOF
    
    # Set correct permissions for sudoers file
    chmod 0440 "$SUDOERS_FILE"
    
    # Validate sudoers file
    if visudo -c -f "$SUDOERS_FILE" >/dev/null 2>&1; then
        echo "✓ Sudoers file created and validated"
    else
        echo "⚠ Sudoers file has syntax errors. Removing..."
        rm -f "$SUDOERS_FILE"
    fi
else
    echo "⚠ Skipping sudoers configuration (requires root)"
    echo "  To configure manually, run:"
    echo "  sudo $0"
fi
echo ""

echo "Step 7: Checking Laravel requirements..."

# Check if storage link exists
if [ ! -L public/storage ]; then
    echo "Creating storage link..."
    if [ "$EUID" -eq 0 ]; then
        sudo -u "$WEB_USER" php artisan storage:link 2>/dev/null || php artisan storage:link
    else
        php artisan storage:link
    fi
fi

# Clear Laravel caches
echo "Clearing Laravel caches..."
if [ "$EUID" -eq 0 ]; then
    sudo -u "$WEB_USER" php artisan cache:clear 2>/dev/null || true
    sudo -u "$WEB_USER" php artisan config:clear 2>/dev/null || true
    sudo -u "$WEB_USER" php artisan route:clear 2>/dev/null || true
    sudo -u "$WEB_USER" php artisan view:clear 2>/dev/null || true
else
    php artisan cache:clear 2>/dev/null || true
    php artisan config:clear 2>/dev/null || true
    php artisan route:clear 2>/dev/null || true
    php artisan view:clear 2>/dev/null || true
fi

echo "✓ Laravel requirements checked"
echo ""

echo "Step 8: Verifying permissions..."
echo ""

# Function to check permissions
check_permission() {
    local path=$1
    local expected_perm=$2
    local actual_perm=$(stat -c %a "$path" 2>/dev/null)
    
    if [ "$actual_perm" = "$expected_perm" ]; then
        echo "✓ $path: $actual_perm"
    else
        echo "⚠ $path: $actual_perm (expected: $expected_perm)"
    fi
}

echo "Directory permissions:"
check_permission "storage" "775"
check_permission "storage/app" "775"
check_permission "storage/logs" "775"
check_permission "bootstrap/cache" "775"
echo ""

echo "Script permissions:"
check_permission "scripts/claude-screen-manager.sh" "755"
check_permission "scripts/fix-permissions.sh" "755"
echo ""

# Check if claude is accessible
echo "Step 9: Checking Claude CLI..."
if command -v claude &> /dev/null; then
    CLAUDE_PATH=$(which claude)
    echo "✓ Claude CLI found at: $CLAUDE_PATH"
    
    # Check if claude is executable
    if [ -x "$CLAUDE_PATH" ]; then
        echo "✓ Claude CLI is executable"
    else
        echo "⚠ Claude CLI is not executable"
    fi
else
    echo "⚠ Claude CLI not found. Please install it."
fi
echo ""

# Check screen installation
echo "Step 10: Checking screen..."
if command -v screen &> /dev/null; then
    echo "✓ screen is installed at: $(which screen)"
else
    echo "⚠ screen is not installed. Installing..."
    if [ "$EUID" -eq 0 ]; then
        apt-get update && apt-get install -y screen
    else
        echo "  Run: sudo apt-get install screen"
    fi
fi
echo ""

echo "======================================"
echo "Permissions Fix Complete!"
echo "======================================"
echo ""

# Summary and recommendations
echo "Summary:"
echo "- Base path: $BASE_PATH"
echo "- Web user: $WEB_USER:$WEB_GROUP"

if [ "$EUID" -eq 0 ]; then
    echo "- Permissions: ✓ Fixed"
    echo "- Ownership: ✓ Set"
    echo "- Sudoers: ✓ Configured"
else
    echo "- Permissions: ⚠ Partially fixed (run as root for full fix)"
    echo "- Ownership: ⚠ Not changed (requires root)"
    echo "- Sudoers: ⚠ Not configured (requires root)"
fi
echo ""

echo "Next steps:"
if [ "$EUID" -ne 0 ]; then
    echo "1. Run this script as root for complete fix:"
    echo "   sudo $0"
    echo ""
fi

echo "1. Test Claude functionality:"
echo "   - Log into the application"
echo "   - Create or select a project"
echo "   - Start Claude session"
echo ""

echo "2. If issues persist, check logs:"
echo "   - Laravel: $BASE_PATH/storage/logs/laravel.log"
echo "   - Claude: $BASE_PATH/storage/logs/claude-screen.log"
echo "   - Nginx: /var/log/nginx/error.log"
echo ""

echo "3. For debugging, check screen sessions:"
echo "   screen -ls"
echo ""

echo "4. To manually test claude-screen-manager.sh:"
echo "   $BASE_PATH/scripts/claude-screen-manager.sh list"
echo ""

# Create a permissions report file
REPORT_FILE="$BASE_PATH/storage/logs/permissions-report-$(date +%Y%m%d-%H%M%S).txt"
{
    echo "Permissions Report - $(date)"
    echo "=========================="
    echo ""
    echo "System Information:"
    echo "- OS: $(lsb_release -d 2>/dev/null | cut -f2 || uname -a)"
    echo "- User: $(whoami)"
    echo "- Web User: $WEB_USER"
    echo "- Base Path: $BASE_PATH"
    echo ""
    echo "Directory Permissions:"
    ls -la storage/ 2>/dev/null
    echo ""
    echo "Script Permissions:"
    ls -la scripts/*.sh 2>/dev/null
    echo ""
    echo "Sudoers Configuration:"
    if [ -f "$SUDOERS_FILE" ]; then
        cat "$SUDOERS_FILE"
    else
        echo "Not configured"
    fi
} > "$REPORT_FILE" 2>&1

echo "Permission report saved to:"
echo "$REPORT_FILE"
echo ""

echo "Script completed successfully!"